pipeline {
    agent any 

    options {
        buildDiscarder(logRotator(numToKeepStr: '30'))
        disableConcurrentBuilds()
        timeout (time: 60, unit: 'MINUTES')
        timestamps()
  }

    environment {
		DOCKERHUB_CREDENTIALS=credentials('Dockerhub-creds')
	}
    
    stages {
        
        
        stage('SonarQube analysis') {
            when {
                expression {
                   env.ENVIRONMENT == 'DEV' 
                }
            }
            agent {
                docker {
                  image 'docker.io/sonarsource/sonar-scanner-cli:latest'
                }
               }
               environment {
        CI = 'true'
        //  scannerHome = tool 'Sonar'
        scannerHome='/opt/sonar-scanner'    

        }
            steps{
                withSonarQubeEnv('Sonar') {
                    sh "${scannerHome}/bin/sonar-scanner"
                }
            }
        }

        stage('Dockerhub Login') {
	    	steps {
                script {
	    		    sh '''
                        echo "${DOCKERHUB_CREDENTIALS_PSW}" | docker login -u "${DOCKERHUB_CREDENTIALS_USR}" --password-stdin
                    '''
                }
	    	}
	    }

        stage('Build auth') {
            
            steps {
                sh '''
                   cd auth
                   docker build -t s4arnold/s4-pipepine-02-auth:${BUILD_NUMBER} .
                   cd -
                   ls 
                '''
            }
        }


        stage('Build DB') {
            
            steps {
                sh '''
                   cd DB
                   docker build -t s4arnold/s4-pipepine-02-db:${BUILD_NUMBER} .
                   cd -

                '''
            }
        }

        

        stage('Build UI') {
        
            steps {
                sh '''
                   cd UI
                   docker build -t s4arnold/s4-pipepine-02-ui:${BUILD_NUMBER} .
                   cd -
                '''
            }
        }

        

        stage('Build weather') {
    
            steps {
                sh '''
                   cd weather
                   docker build -t s4arnold/s4-pipepine-02-weather:${BUILD_NUMBER} .
                   cd -
                '''
            }
        }    
    }
    



    post {
   
      success {
         slackSend (channel: '#random', color: 'good', message: "SUCCESSFUL: Application s4arnold-weather-app  Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
       }
   
    
       unstable {
         slackSend (channel: '#random', color: 'warning', message: "UNSTABLE: Application s4arnold-weather-app  Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
       }
   
       failure {
         slackSend (channel: '#random', color: '#FF0000', message: "FAILURE: Application s4arnold-weather-app Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
       }
      
       cleanup {
         deleteDir()
       }
    }
}







    
